version: '3.8'
services:

  # docker-portainer 组件
  docker-portainer:
    container_name: portainer
    image: portainer/portainer-ce
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./docker_disk/portainer_data:/data
    restart: always
    privileged: true

  mysql:
    container_name: xy-mysql
    image: mysql:8.0.34-1.el8
    ports:
      - "3306:3306"
    volumes:
      - ./docker_disk/mysql/conf:/etc/mysql/conf.d
      - ./docker_disk/mysql/logs:/logs
      - ./docker_disk/mysql/data:/var/lib/mysql
    command: [
      'mysqld',
      '--innodb-buffer-pool-size=80M',
      '--character-set-server=utf8mb4',
      '--collation-server=utf8mb4_unicode_ci',
      '--default-time-zone=+8:00',
      '--lower-case-table-names=1'
    ]
    environment:
      MYSQL_DATABASE: 'payment-demo'
      MYSQL_ROOT_PASSWORD: passwordwget https://raw.githubusercontent.com/alibaba/canal/master/docker/run_admin.sh


    # 配置文件写在命令中无需往docker-container copy配置

  # rocketmq
  rocketmq-namesrv:
    image: foxiswho/rocketmq:4.8.0
    container_name: rocketmq-namesrv
    #    restart: always
    ports:
      - "9876:9876"
    volumes:
      - ./docker_disk/rocketmq/logs:/home/rocketmq/logs
      - ./docker_disk/rocketmq/store:/home/rocketmq/store
    environment:
      JAVA_OPT_EXT: "-Duser.home=/home/rocketmq -Xms128M -Xmx128M -Xmn128m"
    command: [ "sh","mqnamesrv" ]
    networks:
      rocketmq_net:
        aliases:
          - rocketmq-namesrv

  rocketmq-broker:
    image: foxiswho/rocketmq:4.8.0
    container_name: rocketmq-broker
    #    restart: always
    ports:
      - "10909:10909"
      - "10911:10911"
    volumes:
      - ./docker_disk/rocketmq/logs:/home/rocketmq/logs
      - ./docker_disk/rocketmq/store:/home/rocketmq/store
      - ./docker_disk/rocketmq/conf/broker.conf:/etc/rocketmq/broker.conf
      - ./docker_disk/rocketmq/broker/conf/plain_acl.yml:/home/rocketmq/rocketmq-4.8.0/conf/plain_acl.yml
    environment:
      JAVA_OPT_EXT: "-Duser.home=/home/rocketmq -Xms128m -Xmx128m -Xmn128m"
    command: [ "sh","mqbroker","-c","/etc/rocketmq/broker.conf" ]
    depends_on:
      - rocketmq-namesrv
    networks:
      rocketmq_net:
        aliases:
          - rocketmq-broker

  rocketmq-console:
    image: iamverygood/rocketmq-console:4.7.1
    container_name: rocketmq-console
    #    restart: always
    volumes:
      - ./docker_disk/rocketmq/console/data:/tmp/rocketmq-console/data
    ports:
      - "8180:8080"
    environment:
      JAVA_OPTS: "-Drocketmq.namesrv.addr=rocketmq-namesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false -Drocketmq.config.loginRequired=true -Drocketmq.config.aclEnabled=true -Drocketmq.config.accessKey=mallchat -Drocketmq.config.secretKey=12345678"
    depends_on:
      - rocketmq-namesrv
    networks:
      rocketmq_net:
        aliases:
          - rocketmq-console
  # end

  #基于GitHub仓库
  drone-github:
    container_name: drone-github
    image: drone/drone
    ports:
      - '8611:80'
      - '443:443'
    volumes:
      - ./docker_disk/drone/data:/data
    #        - /Users/finding/.orbstack/run/docker.sock:/var/run/docker.sock:rw
    environment:
      # 需在GitHub开通 author2.0 配置 添加 client-id client-secret
      DRONE_GITHUB_CLIENT_ID: '3cb8e2559d1b5d0f59f3'
      DRONE_GITHUB_CLIENT_SECRET: 'dd3347dabdcd0b65b1c41fe7b63fe6239b6cba75'
      DRONE_RPC_SECRET: '75b4bb5bfb4cf22b0677cc4b5cdfa3b8' #  openssl rand -hex 16生成 与drone-runner-docker 通许唯一密钥
      DRONE_SERVER_HOST: 65c6-114-92-132-16.ngrok-free.app #主机ip可配置端口，
      DRONE_SERVER_PROTO: https #协议
      DRONE_USER_CREATE: username:findingwch,admin:true # 配置管理员账号 test填你的GitHub账号名
      DRONE_REGISTRATION_CLOSED: 'true' # 禁止新用户注册
      DRONE_GIT_ALWAYS_AUTH: 'false'

    networks:
      drone:
        aliases:
          - drone-github

  drone-github-drone-runner-docker:
    container_name: drone-github-docker-runner
    image: drone/drone-runner-docker
    ports:
      - "9902:3000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:wr #挂载docker.sock
    #      - 单独映射key文件
    environment:
      DRONE_RPC_PROTO: http
      DRONE_RPC_HOST: 192.168.71.127:8611 #主机ip可配置端口，
      DRONE_RPC_SECRET: '75b4bb5bfb4cf22b0677cc4b5cdfa3b8'
      DRONE_RUNNER_CAPACITY: 2 # 并行任务数
      DRONE_RUNNER_NAME: 'docker-runner'
      #      DRONE_DEBUG: 'true'                      # 调试相关，部署的时候建议先打开
      #      DRONE_LOGS_DEBUG: 'true'                 # 调试相关，部署的时候建议先打开
      #      DRONE_LOGS_TRACE: 'true'                 # 调试相关，部署的时候建议先打开
      TZ: 'Asia/Shanghai'
    networks:
      drone:
        aliases:
          - drone-github-docker-runner
  # end

# 网络配置
networks:
  drone:
    external: false
  rocketmq_net:
    name: rocketmq_net
    driver: bridge